from django.db import models
from django.utils.text import slugify
from django.contrib.auth.models import User
from cloudinary.models import CloudinaryField

# Create your models here.


class PortfolioCategory(models.Model):
    """
    Stores a single portfolio category used to group portfolio images.

    Fields:
        - name: The name of the category (must be unique)
        - slug: A URL-friendly version of the name, autogenerated on save

    Behavior:
        - Overrides save() to automatically populate the slug field
          using Djangoâ€™s slugify utility.

    Used in:
        - :model:`portfolio.PortfolioImage`
    """
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=150, unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class PortfolioImage(models.Model):
    """
    Stores a single image uploaded to a specific portfolio category.

    Related to:
        - :model:`portfolio.PortfolioCategory`

    Fields:
        - category: ForeignKey to the associated category
        - title: Short description or name of the image
        - image: Cloudinary-hosted image file
        - uploaded_at: Timestamp of the upload
    """
    category = models.ForeignKey(
        PortfolioCategory, on_delete=models.CASCADE, related_name='images')
    title = models.CharField(max_length=100)
    image = CloudinaryField('image')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title


class Comment(models.Model):
    """
    Stores a comment left by a user on a specific portfolio image.

    Related to:
        - :model:`auth.User`
        - :model:`portfolio.PortfolioImage`

    Fields:
        - image: ForeignKey to the image being commented on
        - user: Author of the comment
        - content: Text content of the comment
        - created_at: Timestamp of when the comment was made
    """
    image = models.ForeignKey(
        'PortfolioImage', on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField(max_length=500)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Comment by {self.user.username} on {self.image.title}"


class Like(models.Model):
    """
    Stores a 'like' from a user on a specific portfolio image.

    Related to:
        - :model:`auth.User`
        - :model:`portfolio.PortfolioImage`

    Constraints:
        - A user can only like a given image once (enforced by unique_together)

    Fields:
        - image: ForeignKey to the liked image
        - user: The user who liked the image
    """
    image = models.ForeignKey(
        'PortfolioImage', on_delete=models.CASCADE, related_name='likes')
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('image', 'user')

    def __str__(self):
        return f"{self.user.username} liked {self.image.title}"
